// Code generated by MockGen. DO NOT EDIT.
// Source: sqs_publisher.go
//
// Generated by this command:
//
//	mockgen -source=sqs_publisher.go -destination=./mocks/mock_sqs_publisher.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	log "github.com/Haevnen/audit-logging-api/internal/entity/log"
	service "github.com/Haevnen/audit-logging-api/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockSQSPublisher is a mock of SQSPublisher interface.
type MockSQSPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockSQSPublisherMockRecorder
	isgomock struct{}
}

// MockSQSPublisherMockRecorder is the mock recorder for MockSQSPublisher.
type MockSQSPublisherMockRecorder struct {
	mock *MockSQSPublisher
}

// NewMockSQSPublisher creates a new mock instance.
func NewMockSQSPublisher(ctrl *gomock.Controller) *MockSQSPublisher {
	mock := &MockSQSPublisher{ctrl: ctrl}
	mock.recorder = &MockSQSPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQSPublisher) EXPECT() *MockSQSPublisherMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockSQSPublisher) DeleteMessage(ctx context.Context, queueURL string, receiptHandle *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, queueURL, receiptHandle)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockSQSPublisherMockRecorder) DeleteMessage(ctx, queueURL, receiptHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockSQSPublisher)(nil).DeleteMessage), ctx, queueURL, receiptHandle)
}

// PublishArchiveMessage mocks base method.
func (m *MockSQSPublisher) PublishArchiveMessage(ctx context.Context, taskId string, beforeDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishArchiveMessage", ctx, taskId, beforeDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishArchiveMessage indicates an expected call of PublishArchiveMessage.
func (mr *MockSQSPublisherMockRecorder) PublishArchiveMessage(ctx, taskId, beforeDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishArchiveMessage", reflect.TypeOf((*MockSQSPublisher)(nil).PublishArchiveMessage), ctx, taskId, beforeDate)
}

// PublishCleanUpMessage mocks base method.
func (m *MockSQSPublisher) PublishCleanUpMessage(ctx context.Context, taskId string, beforeDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishCleanUpMessage", ctx, taskId, beforeDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishCleanUpMessage indicates an expected call of PublishCleanUpMessage.
func (mr *MockSQSPublisherMockRecorder) PublishCleanUpMessage(ctx, taskId, beforeDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishCleanUpMessage", reflect.TypeOf((*MockSQSPublisher)(nil).PublishCleanUpMessage), ctx, taskId, beforeDate)
}

// PublishIndexMessage mocks base method.
func (m *MockSQSPublisher) PublishIndexMessage(ctx context.Context, taskId string, logs []log.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishIndexMessage", ctx, taskId, logs)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishIndexMessage indicates an expected call of PublishIndexMessage.
func (mr *MockSQSPublisherMockRecorder) PublishIndexMessage(ctx, taskId, logs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishIndexMessage", reflect.TypeOf((*MockSQSPublisher)(nil).PublishIndexMessage), ctx, taskId, logs)
}

// ReceiveMessages mocks base method.
func (m *MockSQSPublisher) ReceiveMessages(ctx context.Context, queueURL string, maxMessages, waitTimeSeconds int32) ([]service.ReceiveMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessages", ctx, queueURL, maxMessages, waitTimeSeconds)
	ret0, _ := ret[0].([]service.ReceiveMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessages indicates an expected call of ReceiveMessages.
func (mr *MockSQSPublisherMockRecorder) ReceiveMessages(ctx, queueURL, maxMessages, waitTimeSeconds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessages", reflect.TypeOf((*MockSQSPublisher)(nil).ReceiveMessages), ctx, queueURL, maxMessages, waitTimeSeconds)
}
