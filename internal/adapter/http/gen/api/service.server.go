// Package api_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_service

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate auth token
	// (POST /auth/token)
	GenerateToken(c *gin.Context)
	// Advanced search logs
	// (GET /logs)
	SearchLogs(c *gin.Context, params SearchLogsParams)
	// Create a new log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Create bulk logs
	// (POST /logs/bulk)
	CreateBulkLogs(c *gin.Context)
	// Cleanup logs
	// (DELETE /logs/cleanup)
	CleanupLogs(c *gin.Context, params CleanupLogsParams)
	// Get logs stat
	// (GET /logs/stats)
	GetLogsStat(c *gin.Context, params GetLogsStatParams)
	// Get a log by id
	// (GET /logs/{id})
	GetLog(c *gin.Context, id string)

	// (GET /ping)
	GetPing(c *gin.Context)
	// List all tenants
	// (GET /tenants)
	ListTenants(c *gin.Context)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateToken operation middleware
func (siw *ServerInterfaceWrapper) GenerateToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateToken(c)
}

// SearchLogs operation middleware
func (siw *ServerInterfaceWrapper) SearchLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchLogsParams

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", c.Request.URL.Query(), &params.Resource)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resource: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", c.Request.URL.Query(), &params.Severity)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter severity: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTime", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startTime: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "endTime", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endTime: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", c.Request.URL.Query(), &params.PageNumber)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageNumber: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchLogs(c, params)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLog(c)
}

// CreateBulkLogs operation middleware
func (siw *ServerInterfaceWrapper) CreateBulkLogs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBulkLogs(c)
}

// CleanupLogs operation middleware
func (siw *ServerInterfaceWrapper) CleanupLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CleanupLogsParams

	// ------------- Required query parameter "beforeDate" -------------

	if paramValue := c.Query("beforeDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument beforeDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "beforeDate", c.Request.URL.Query(), &params.BeforeDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beforeDate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CleanupLogs(c, params)
}

// GetLogsStat operation middleware
func (siw *ServerInterfaceWrapper) GetLogsStat(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogsStatParams

	// ------------- Required query parameter "startDate" -------------

	if paramValue := c.Query("startDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument startDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endDate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogsStat(c, params)
}

// GetLog operation middleware
func (siw *ServerInterfaceWrapper) GetLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLog(c, id)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTenant(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/token", wrapper.GenerateToken)
	router.GET(options.BaseURL+"/logs", wrapper.SearchLogs)
	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)
	router.POST(options.BaseURL+"/logs/bulk", wrapper.CreateBulkLogs)
	router.DELETE(options.BaseURL+"/logs/cleanup", wrapper.CleanupLogs)
	router.GET(options.BaseURL+"/logs/stats", wrapper.GetLogsStat)
	router.GET(options.BaseURL+"/logs/:id", wrapper.GetLog)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/tenants", wrapper.CreateTenant)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
