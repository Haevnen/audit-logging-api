// Package api_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_service

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate auth token
	// (POST /auth/token)
	GenerateToken(c *gin.Context)
	// Advanced search logs
	// (GET /logs)
	SearchLogs(c *gin.Context, params SearchLogsParams)
	// Create a new log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Create bulk logs
	// (POST /logs/bulk)
	CreateBulkLogs(c *gin.Context)
	// Cleanup logs
	// (DELETE /logs/cleanup)
	CleanupLogs(c *gin.Context, params CleanupLogsParams)
	// Export logs
	// (GET /logs/export)
	ExportLogs(c *gin.Context, params ExportLogsParams)
	// Get logs stat
	// (GET /logs/stats)
	GetLogsStat(c *gin.Context, params GetLogsStatParams)
	// Stream logs in real time
	// (GET /logs/stream)
	StreamLogs(c *gin.Context, params StreamLogsParams)
	// Get a log by id
	// (GET /logs/{id})
	GetLog(c *gin.Context, id string)

	// (GET /ping)
	GetPing(c *gin.Context)
	// List all tenants
	// (GET /tenants)
	ListTenants(c *gin.Context)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateToken operation middleware
func (siw *ServerInterfaceWrapper) GenerateToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateToken(c)
}

// SearchLogs operation middleware
func (siw *ServerInterfaceWrapper) SearchLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchLogsParams

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", c.Request.URL.Query(), &params.Resource)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resource: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", c.Request.URL.Query(), &params.Severity)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter severity: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", c.Request.URL.Query(), &params.PageNumber)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageNumber: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchLogs(c, params)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLog(c)
}

// CreateBulkLogs operation middleware
func (siw *ServerInterfaceWrapper) CreateBulkLogs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBulkLogs(c)
}

// CleanupLogs operation middleware
func (siw *ServerInterfaceWrapper) CleanupLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CleanupLogsParams

	// ------------- Required query parameter "before_date" -------------

	if paramValue := c.Query("before_date"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument before_date is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "before_date", c.Request.URL.Query(), &params.BeforeDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter before_date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CleanupLogs(c, params)
}

// ExportLogs operation middleware
func (siw *ServerInterfaceWrapper) ExportLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportLogsParams

	// ------------- Optional query parameter "tenant_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant_id", c.Request.URL.Query(), &params.TenantId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenant_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", c.Request.URL.Query(), &params.Severity)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter severity: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "format" -------------

	if paramValue := c.Query("format"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument format is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "format", c.Request.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter format: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExportLogs(c, params)
}

// GetLogsStat operation middleware
func (siw *ServerInterfaceWrapper) GetLogsStat(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogsStatParams

	// ------------- Required query parameter "startDate" -------------

	if paramValue := c.Query("startDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument startDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endDate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogsStat(c, params)
}

// StreamLogs operation middleware
func (siw *ServerInterfaceWrapper) StreamLogs(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params StreamLogsParams

	// ------------- Optional query parameter "tenant_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant_id", c.Request.URL.Query(), &params.TenantId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenant_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StreamLogs(c, params)
}

// GetLog operation middleware
func (siw *ServerInterfaceWrapper) GetLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLog(c, id)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTenant(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/token", wrapper.GenerateToken)
	router.GET(options.BaseURL+"/logs", wrapper.SearchLogs)
	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)
	router.POST(options.BaseURL+"/logs/bulk", wrapper.CreateBulkLogs)
	router.DELETE(options.BaseURL+"/logs/cleanup", wrapper.CleanupLogs)
	router.GET(options.BaseURL+"/logs/export", wrapper.ExportLogs)
	router.GET(options.BaseURL+"/logs/stats", wrapper.GetLogsStat)
	router.GET(options.BaseURL+"/logs/stream", wrapper.StreamLogs)
	router.GET(options.BaseURL+"/logs/:id", wrapper.GetLog)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/tenants", wrapper.CreateTenant)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dzXhqtnPXsCpetnXxc3ivwEAAP//UNIU9cE/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
