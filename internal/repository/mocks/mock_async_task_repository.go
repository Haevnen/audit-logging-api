// Code generated by MockGen. DO NOT EDIT.
// Source: async_task_repository.go
//
// Generated by this command:
//
//	mockgen -source=async_task_repository.go -destination=./mocks/mock_async_task_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	async_task "github.com/Haevnen/audit-logging-api/internal/entity/async_task"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockAsyncTaskRepository is a mock of AsyncTaskRepository interface.
type MockAsyncTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncTaskRepositoryMockRecorder
	isgomock struct{}
}

// MockAsyncTaskRepositoryMockRecorder is the mock recorder for MockAsyncTaskRepository.
type MockAsyncTaskRepositoryMockRecorder struct {
	mock *MockAsyncTaskRepository
}

// NewMockAsyncTaskRepository creates a new mock instance.
func NewMockAsyncTaskRepository(ctrl *gomock.Controller) *MockAsyncTaskRepository {
	mock := &MockAsyncTaskRepository{ctrl: ctrl}
	mock.recorder = &MockAsyncTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncTaskRepository) EXPECT() *MockAsyncTaskRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAsyncTaskRepository) Create(ctx context.Context, db *gorm.DB, task *async_task.AsyncTask) (*async_task.AsyncTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, db, task)
	ret0, _ := ret[0].(*async_task.AsyncTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAsyncTaskRepositoryMockRecorder) Create(ctx, db, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAsyncTaskRepository)(nil).Create), ctx, db, task)
}

// GetByID mocks base method.
func (m *MockAsyncTaskRepository) GetByID(ctx context.Context, taskID string) (*async_task.AsyncTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, taskID)
	ret0, _ := ret[0].(*async_task.AsyncTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAsyncTaskRepositoryMockRecorder) GetByID(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAsyncTaskRepository)(nil).GetByID), ctx, taskID)
}

// UpdateStatus mocks base method.
func (m *MockAsyncTaskRepository) UpdateStatus(ctx context.Context, db *gorm.DB, taskID string, status async_task.AsyncTaskStatus, errorMsg *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, db, taskID, status, errorMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockAsyncTaskRepositoryMockRecorder) UpdateStatus(ctx, db, taskID, status, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockAsyncTaskRepository)(nil).UpdateStatus), ctx, db, taskID, status, errorMsg)
}
