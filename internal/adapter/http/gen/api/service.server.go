// Package api_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_service

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate auth token
	// (POST /auth/token)
	GenerateToken(c *gin.Context)
	// Create a new log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Create bulk logs
	// (POST /logs/bulk)
	CreateBulkLogs(c *gin.Context)
	// Get a log by id
	// (GET /logs/{id})
	GetLog(c *gin.Context, id string)

	// (GET /ping)
	GetPing(c *gin.Context)
	// List all tenants
	// (GET /tenants)
	ListTenants(c *gin.Context)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateToken operation middleware
func (siw *ServerInterfaceWrapper) GenerateToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateToken(c)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLog(c)
}

// CreateBulkLogs operation middleware
func (siw *ServerInterfaceWrapper) CreateBulkLogs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBulkLogs(c)
}

// GetLog operation middleware
func (siw *ServerInterfaceWrapper) GetLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLog(c, id)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTenant(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/token", wrapper.GenerateToken)
	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)
	router.POST(options.BaseURL+"/logs/bulk", wrapper.CreateBulkLogs)
	router.GET(options.BaseURL+"/logs/:id", wrapper.GetLog)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/tenants", wrapper.CreateTenant)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
