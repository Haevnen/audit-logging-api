// Code generated by MockGen. DO NOT EDIT.
// Source: log_search_repository.go
//
// Generated by this command:
//
//	mockgen -source=log_search_repository.go -destination=./mocks/mock_log_search_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	log "github.com/Haevnen/audit-logging-api/internal/entity/log"
	repository "github.com/Haevnen/audit-logging-api/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockLogSearchRepository is a mock of LogSearchRepository interface.
type MockLogSearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLogSearchRepositoryMockRecorder
	isgomock struct{}
}

// MockLogSearchRepositoryMockRecorder is the mock recorder for MockLogSearchRepository.
type MockLogSearchRepositoryMockRecorder struct {
	mock *MockLogSearchRepository
}

// NewMockLogSearchRepository creates a new mock instance.
func NewMockLogSearchRepository(ctrl *gomock.Controller) *MockLogSearchRepository {
	mock := &MockLogSearchRepository{ctrl: ctrl}
	mock.recorder = &MockLogSearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogSearchRepository) EXPECT() *MockLogSearchRepositoryMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockLogSearchRepository) Search(ctx context.Context, filters repository.LogSearchFilters) (*repository.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, filters)
	ret0, _ := ret[0].(*repository.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockLogSearchRepositoryMockRecorder) Search(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockLogSearchRepository)(nil).Search), ctx, filters)
}

// Stream mocks base method.
func (m *MockLogSearchRepository) Stream(ctx context.Context, filters repository.LogSearchFilters, fn func(log.Log) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", ctx, filters, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockLogSearchRepositoryMockRecorder) Stream(ctx, filters, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockLogSearchRepository)(nil).Stream), ctx, filters, fn)
}
