// Package api_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_service

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate auth token
	// (POST /auth/token)
	GenerateToken(c *gin.Context)
	// Create a new log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Create bulk logs
	// (POST /logs/bulk)
	CreateBulkLogs(c *gin.Context)
	// Cleanup logs
	// (DELETE /logs/cleanup)
	CleanupLogs(c *gin.Context, params CleanupLogsParams)
	// Get a log by id
	// (GET /logs/{id})
	GetLog(c *gin.Context, id string)

	// (GET /ping)
	GetPing(c *gin.Context)
	// List all tenants
	// (GET /tenants)
	ListTenants(c *gin.Context)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateToken operation middleware
func (siw *ServerInterfaceWrapper) GenerateToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateToken(c)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLog(c)
}

// CreateBulkLogs operation middleware
func (siw *ServerInterfaceWrapper) CreateBulkLogs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBulkLogs(c)
}

// CleanupLogs operation middleware
func (siw *ServerInterfaceWrapper) CleanupLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CleanupLogsParams

	// ------------- Required query parameter "beforeDate" -------------

	if paramValue := c.Query("beforeDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument beforeDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "beforeDate", c.Request.URL.Query(), &params.BeforeDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beforeDate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CleanupLogs(c, params)
}

// GetLog operation middleware
func (siw *ServerInterfaceWrapper) GetLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLog(c, id)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTenant(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/token", wrapper.GenerateToken)
	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)
	router.POST(options.BaseURL+"/logs/bulk", wrapper.CreateBulkLogs)
	router.DELETE(options.BaseURL+"/logs/cleanup", wrapper.CleanupLogs)
	router.GET(options.BaseURL+"/logs/:id", wrapper.GetLog)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/tenants", wrapper.CreateTenant)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
