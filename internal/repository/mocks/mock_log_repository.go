// Code generated by MockGen. DO NOT EDIT.
// Source: log_repository.go
//
// Generated by this command:
//
//	mockgen -source=log_repository.go -destination=./mocks/mock_log_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	log "github.com/Haevnen/audit-logging-api/internal/entity/log"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockLogRepository is a mock of LogRepository interface.
type MockLogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLogRepositoryMockRecorder
	isgomock struct{}
}

// MockLogRepositoryMockRecorder is the mock recorder for MockLogRepository.
type MockLogRepositoryMockRecorder struct {
	mock *MockLogRepository
}

// NewMockLogRepository creates a new mock instance.
func NewMockLogRepository(ctrl *gomock.Controller) *MockLogRepository {
	mock := &MockLogRepository{ctrl: ctrl}
	mock.recorder = &MockLogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogRepository) EXPECT() *MockLogRepositoryMockRecorder {
	return m.recorder
}

// CleanupLogsBefore mocks base method.
func (m *MockLogRepository) CleanupLogsBefore(ctx context.Context, db *gorm.DB, tenantId *string, beforeDate time.Time) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupLogsBefore", ctx, db, tenantId, beforeDate)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupLogsBefore indicates an expected call of CleanupLogsBefore.
func (mr *MockLogRepositoryMockRecorder) CleanupLogsBefore(ctx, db, tenantId, beforeDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupLogsBefore", reflect.TypeOf((*MockLogRepository)(nil).CleanupLogsBefore), ctx, db, tenantId, beforeDate)
}

// Create mocks base method.
func (m *MockLogRepository) Create(ctx context.Context, arg1 *log.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLogRepositoryMockRecorder) Create(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLogRepository)(nil).Create), ctx, arg1)
}

// CreateBulk mocks base method.
func (m *MockLogRepository) CreateBulk(ctx context.Context, db *gorm.DB, logs []log.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBulk", ctx, db, logs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBulk indicates an expected call of CreateBulk.
func (mr *MockLogRepositoryMockRecorder) CreateBulk(ctx, db, logs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulk", reflect.TypeOf((*MockLogRepository)(nil).CreateBulk), ctx, db, logs)
}

// FindLogsForArchival mocks base method.
func (m *MockLogRepository) FindLogsForArchival(ctx context.Context, tenantId *string, beforeDate time.Time) ([]log.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLogsForArchival", ctx, tenantId, beforeDate)
	ret0, _ := ret[0].([]log.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLogsForArchival indicates an expected call of FindLogsForArchival.
func (mr *MockLogRepositoryMockRecorder) FindLogsForArchival(ctx, tenantId, beforeDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLogsForArchival", reflect.TypeOf((*MockLogRepository)(nil).FindLogsForArchival), ctx, tenantId, beforeDate)
}

// GetByID mocks base method.
func (m *MockLogRepository) GetByID(ctx context.Context, id, tenantId string) (*log.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id, tenantId)
	ret0, _ := ret[0].(*log.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockLogRepositoryMockRecorder) GetByID(ctx, id, tenantId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockLogRepository)(nil).GetByID), ctx, id, tenantId)
}

// GetStats mocks base method.
func (m *MockLogRepository) GetStats(ctx context.Context, tenantId string, startTime, endTime time.Time) ([]log.LogStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx, tenantId, startTime, endTime)
	ret0, _ := ret[0].([]log.LogStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockLogRepositoryMockRecorder) GetStats(ctx, tenantId, startTime, endTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockLogRepository)(nil).GetStats), ctx, tenantId, startTime, endTime)
}
