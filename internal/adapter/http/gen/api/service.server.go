// Package api_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_service

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate auth token
	// (POST /auth/token)
	GenerateToken(c *gin.Context)
	// Create a new log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Create bulk logs
	// (POST /logs/bulk)
	CreateBulkLogs(c *gin.Context)
	// Get a log by id
	// (GET /logs/{id})
	GetLog(c *gin.Context, id string)

	// (GET /ping)
	GetPing(c *gin.Context)
	// List all tenants
	// (GET /tenants)
	ListTenants(c *gin.Context)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateToken operation middleware
func (siw *ServerInterfaceWrapper) GenerateToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateToken(c)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLog(c)
}

// CreateBulkLogs operation middleware
func (siw *ServerInterfaceWrapper) CreateBulkLogs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBulkLogs(c)
}

// GetLog operation middleware
func (siw *ServerInterfaceWrapper) GetLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLog(c, id)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTenant(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/token", wrapper.GenerateToken)
	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)
	router.POST(options.BaseURL+"/logs/bulk", wrapper.CreateBulkLogs)
	router.GET(options.BaseURL+"/logs/:id", wrapper.GetLog)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/tenants", wrapper.CreateTenant)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
