openapi: 3.0.3
info:
  title: Audit Logging API
  version: 1.0.0
servers:
  - url: '{host}/api/v1'
    variables:
      host:
        default: http://localhost:38081
        enum:
        - http://localhost:38081
tags:
- description: Tenant API
  name: Tenants
- description: Log API
  name: Logs
- description: Other
  name: Other
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token
  schemas:
    Tenant:
      properties:
        id:
          description: uuid string
          example: 123e4567-e89b-12d3-a456-426655440000
          type: string
        name:
          example: My Tenant
          type: string
        created_at:
          description: Timestamp
          example: 2025-08-19T20:28:12Z
          type: string
        updated_at:
          description: Timestamp
          example: 2025-08-19T20:28:12Z
          type: string
      required:
      - name
      - id
      - created_at
      - updated_at
      type: object
    Error:
      properties:
        type:
          default: internal_error
          enum:
          - validation_failed
          - permission_denied
          - request_not_found
          - internal_error
          type: string
        code:
          description: Custom error code
          type: string
        title:
          description: Error Summary
          type: string
        detail:
          description: Detailed error description
          type: string
      required:
      - code
      - detail
      - title
      - type
      type: object
    CreateTenantRequestBody:
      properties:
        name:
          example: My Tenant
          type: string
      required:
      - name
      type: object
    GenerateTokenResponse:
      properties:
        token:
          type: string
      required:
      - token
      type: object
    Pong:
      type: object
      required:
        - ping
      properties:
        ping:
          type: string
          example: pong
    GenerateTokenRequestBody:
      type: object
      properties:
        tenant_id:
          type: string
          example: 123e4567-e89b-12d3-a456-426655440000
        user_id:
          type: string
          example: 123user
        role:
          type: string
          example: admin/user/auditor
      required:
        - role
        - user_id
        - tenant_id
    CreateLogRequestBody:
      type: object
      required: [tenant_id, user_id, action, severity, event_timestamp]
      properties:
        tenant_id:
          type: string
        user_id:
          type: string
        session_id:
          type: string
        action:
          $ref: '#/components/schemas/Action'
        message:
          type: string
        resource:
          type: string
        resource_id:
          type: string
        severity:
          $ref: '#/components/schemas/Severity'
        ip_address:
          type: string
          format: ipv4
        user_agent:
          type: string
        before:
          type: object
          additionalProperties: true
        after:
          type: object
          additionalProperties: true
        metadata:
          type: object
          additionalProperties: true
        event_timestamp:
          type: string
          format: date-time
    CreateLogResponse:
      type: object
      properties:
        id:
          type: string
          description: UUID
        event_timestamp:
          type: string
          description: Timestamp
      required:
        - id
        - event_timestamp
    Severity:
      type: string
      enum: [INFO, WARNING, ERROR, CRITICAL]
    Action:
      type: string
      enum: [CREATE, UPDATE, DELETE, VIEW]
    GetSingleLogResponse:
      type: object
      properties:
        id:
          type: string
          description: UUID
        tenant_id:
          type: string
        user_id:
          type: string
        session_id:
          type: string
        action:
          $ref: '#/components/schemas/Action'
        message:
          type: string
        resource:
          type: string
        resource_id:
          type: string
        severity:
          $ref: '#/components/schemas/Severity'
        ip_address:
          type: string
          format: ipv4
        user_agent:
          type: string
        before:
          type: object
          additionalProperties: true
        after:
          type: object
          additionalProperties: true
        metadata:
          type: object
          additionalProperties: true
        event_timestamp:
          type: string
          description: Timestamp
      required: [id, tenant_id, user_id, action, severity, event_timestamp]
    LogStat:
      type: object
      properties:
        Day:
          type: string
          description: The day of the aggregated stats
        Total:
          type: integer
          format: int64
          description: Total logs for the day
        CREATE:
          type: integer
          format: int64
          description: Number of CREATE logs
        UPDATE:
          type: integer
          format: int64
          description: Number of UPDATE logs
        DELETE:
          type: integer
          format: int64
          description: Number of DELETE logs
        VIEW:
          type: integer
          format: int64
          description: Number of VIEW logs
        INFO:
          type: integer
          format: int64
          description: Number of INFO logs
        ERROR:
          type: integer
          format: int64
          description: Number of ERROR logs
        WARNING:
          type: integer
          format: int64
          description: Number of WARNING logs
        CRITICAL:
          type: integer
          format: int64
          description: Number of CRITICAL logs
      required: [Day, Total, CREATE, UPDATE, DELETE, VIEW, INFO, ERROR, WARNING, CRITICAL]

paths:
  /auth/token:
    post:
      description: Generate auth token (testing purpose)
      operationId: GenerateToken
      summary: Generate auth token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateTokenRequestBody'
      tags: 
      - Other
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTokenResponse'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        
  /ping:
    get:
      responses:
        '200':
          description: health check response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
      tags:
      - Health
  /tenants:
    get:
      description: List accessible tenants (admin only)
      operationId: ListTenants
      summary: List all tenants
      tags: 
      - Tenants
      security: 
      - BearerAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tenant'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access Forbidden (admin only)
    post:
      operationId: CreateTenant
      description: Create a new tenant (admin only)
      summary: Create a new tenant
      tags: 
      - Tenants
      security: 
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantRequestBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access Forbidden (admin only)
  /logs:
    post:
      operationId: CreateLog
      description: Create a new log
      summary: Create a new log
      tags: 
      - Logs
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogRequestBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLogResponse'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access Forbidden
  /logs/bulk:
    post:
      operationId: CreateBulkLogs
      description: Create bulk logs
      summary: Create bulk logs
      tags: 
      - Logs
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateLogRequestBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLogResponse'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access Forbidden
  /logs/{id}:
    get:
      operationId: GetLog
      description: Get a log by id
      summary: Get a log by id
      tags: 
      - Logs
      security:
      - BearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSingleLogResponse'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
  /logs/cleanup:
    delete:
      operationId: CleanupLogs
      description: Cleanup logs
      summary: Cleanup logs
      tags: 
      - Logs
      security:
      - BearerAuth: []
      parameters:
      - in: query
        name: beforeDate
        required: true
        schema:
          type: string
          format: date-time
      responses:
        "200":
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access Forbidden
  /logs/stats:
    get:
      operationId: GetLogsStat
      description: Return aggregated log statistics for actions and severity (refresh every 5 mins)
      summary: Get logs stat
      tags: 
      - Logs
      security:
      - BearerAuth: []
      parameters:
      - in: query
        name: startDate
        required: true
        schema:
          type: string
          format: date-time
      - in: query
        name: endDate
        schema:
          type: string
          format: date-time
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogStat'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access Forbidden
