// Code generated by MockGen. DO NOT EDIT.
// Source: opensearch_publisher.go
//
// Generated by this command:
//
//	mockgen -source=opensearch_publisher.go -destination=./mocks/mock_opensearch_publisher.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	log "github.com/Haevnen/audit-logging-api/internal/entity/log"
	gomock "go.uber.org/mock/gomock"
)

// MockOpenSearchPublisher is a mock of OpenSearchPublisher interface.
type MockOpenSearchPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockOpenSearchPublisherMockRecorder
	isgomock struct{}
}

// MockOpenSearchPublisherMockRecorder is the mock recorder for MockOpenSearchPublisher.
type MockOpenSearchPublisherMockRecorder struct {
	mock *MockOpenSearchPublisher
}

// NewMockOpenSearchPublisher creates a new mock instance.
func NewMockOpenSearchPublisher(ctrl *gomock.Controller) *MockOpenSearchPublisher {
	mock := &MockOpenSearchPublisher{ctrl: ctrl}
	mock.recorder = &MockOpenSearchPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenSearchPublisher) EXPECT() *MockOpenSearchPublisherMockRecorder {
	return m.recorder
}

// DeleteLogsBulk mocks base method.
func (m *MockOpenSearchPublisher) DeleteLogsBulk(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogsBulk", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogsBulk indicates an expected call of DeleteLogsBulk.
func (mr *MockOpenSearchPublisherMockRecorder) DeleteLogsBulk(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogsBulk", reflect.TypeOf((*MockOpenSearchPublisher)(nil).DeleteLogsBulk), ctx, ids)
}

// IndexLog mocks base method.
func (m *MockOpenSearchPublisher) IndexLog(ctx context.Context, l log.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexLog", ctx, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexLog indicates an expected call of IndexLog.
func (mr *MockOpenSearchPublisherMockRecorder) IndexLog(ctx, l any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexLog", reflect.TypeOf((*MockOpenSearchPublisher)(nil).IndexLog), ctx, l)
}

// IndexLogsBulk mocks base method.
func (m *MockOpenSearchPublisher) IndexLogsBulk(ctx context.Context, logs []log.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexLogsBulk", ctx, logs)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexLogsBulk indicates an expected call of IndexLogsBulk.
func (mr *MockOpenSearchPublisherMockRecorder) IndexLogsBulk(ctx, logs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexLogsBulk", reflect.TypeOf((*MockOpenSearchPublisher)(nil).IndexLogsBulk), ctx, logs)
}
