// Package api_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_service

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate auth token
	// (POST /auth/token)
	GenerateToken(c *gin.Context)
	// Create a new log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Create bulk logs
	// (POST /logs/bulk)
	CreateBulkLogs(c *gin.Context)
	// Cleanup logs
	// (DELETE /logs/cleanup)
	CleanupLogs(c *gin.Context, params CleanupLogsParams)
	// Get logs stat
	// (GET /logs/stats)
	GetLogsStat(c *gin.Context, params GetLogsStatParams)
	// Get a log by id
	// (GET /logs/{id})
	GetLog(c *gin.Context, id string)

	// (GET /ping)
	GetPing(c *gin.Context)
	// List all tenants
	// (GET /tenants)
	ListTenants(c *gin.Context)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateToken operation middleware
func (siw *ServerInterfaceWrapper) GenerateToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateToken(c)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLog(c)
}

// CreateBulkLogs operation middleware
func (siw *ServerInterfaceWrapper) CreateBulkLogs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBulkLogs(c)
}

// CleanupLogs operation middleware
func (siw *ServerInterfaceWrapper) CleanupLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CleanupLogsParams

	// ------------- Required query parameter "beforeDate" -------------

	if paramValue := c.Query("beforeDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument beforeDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "beforeDate", c.Request.URL.Query(), &params.BeforeDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beforeDate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CleanupLogs(c, params)
}

// GetLogsStat operation middleware
func (siw *ServerInterfaceWrapper) GetLogsStat(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogsStatParams

	// ------------- Required query parameter "startDate" -------------

	if paramValue := c.Query("startDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument startDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endDate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogsStat(c, params)
}

// GetLog operation middleware
func (siw *ServerInterfaceWrapper) GetLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLog(c, id)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTenant(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/token", wrapper.GenerateToken)
	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)
	router.POST(options.BaseURL+"/logs/bulk", wrapper.CreateBulkLogs)
	router.DELETE(options.BaseURL+"/logs/cleanup", wrapper.CleanupLogs)
	router.GET(options.BaseURL+"/logs/stats", wrapper.GetLogsStat)
	router.GET(options.BaseURL+"/logs/:id", wrapper.GetLog)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/tenants", wrapper.CreateTenant)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
