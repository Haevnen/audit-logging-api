// Package api_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_service

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate auth token
	// (POST /auth/token)
	GenerateToken(c *gin.Context)
	// Advanced search logs
	// (GET /logs)
	SearchLogs(c *gin.Context, params SearchLogsParams)
	// Create a new log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Create bulk logs
	// (POST /logs/bulk)
	CreateBulkLogs(c *gin.Context)
	// Cleanup logs
	// (DELETE /logs/cleanup)
	CleanupLogs(c *gin.Context, params CleanupLogsParams)
	// Export logs
	// (GET /logs/export)
	ExportLogs(c *gin.Context, params ExportLogsParams)
	// Get logs stat
	// (GET /logs/stats)
	GetLogsStat(c *gin.Context, params GetLogsStatParams)
	// Stream logs in real time
	// (GET /logs/stream)
	StreamLogs(c *gin.Context, params StreamLogsParams)
	// Get a log by id
	// (GET /logs/{id})
	GetLog(c *gin.Context, id string)

	// (GET /ping)
	GetPing(c *gin.Context)
	// List all tenants
	// (GET /tenants)
	ListTenants(c *gin.Context)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateToken operation middleware
func (siw *ServerInterfaceWrapper) GenerateToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateToken(c)
}

// SearchLogs operation middleware
func (siw *ServerInterfaceWrapper) SearchLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchLogsParams

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", c.Request.URL.Query(), &params.Resource)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resource: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", c.Request.URL.Query(), &params.Severity)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter severity: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", c.Request.URL.Query(), &params.PageNumber)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageNumber: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchLogs(c, params)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLog(c)
}

// CreateBulkLogs operation middleware
func (siw *ServerInterfaceWrapper) CreateBulkLogs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBulkLogs(c)
}

// CleanupLogs operation middleware
func (siw *ServerInterfaceWrapper) CleanupLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CleanupLogsParams

	// ------------- Required query parameter "before_date" -------------

	if paramValue := c.Query("before_date"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument before_date is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "before_date", c.Request.URL.Query(), &params.BeforeDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter before_date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CleanupLogs(c, params)
}

// ExportLogs operation middleware
func (siw *ServerInterfaceWrapper) ExportLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportLogsParams

	// ------------- Optional query parameter "tenant_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant_id", c.Request.URL.Query(), &params.TenantId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenant_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", c.Request.URL.Query(), &params.Severity)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter severity: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "format" -------------

	if paramValue := c.Query("format"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument format is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "format", c.Request.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter format: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExportLogs(c, params)
}

// GetLogsStat operation middleware
func (siw *ServerInterfaceWrapper) GetLogsStat(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogsStatParams

	// ------------- Required query parameter "start_date" -------------

	if paramValue := c.Query("start_date"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument start_date is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start_date", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_date: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogsStat(c, params)
}

// StreamLogs operation middleware
func (siw *ServerInterfaceWrapper) StreamLogs(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params StreamLogsParams

	// ------------- Optional query parameter "tenant_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant_id", c.Request.URL.Query(), &params.TenantId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenant_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StreamLogs(c, params)
}

// GetLog operation middleware
func (siw *ServerInterfaceWrapper) GetLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLog(c, id)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTenant(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/token", wrapper.GenerateToken)
	router.GET(options.BaseURL+"/logs", wrapper.SearchLogs)
	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)
	router.POST(options.BaseURL+"/logs/bulk", wrapper.CreateBulkLogs)
	router.DELETE(options.BaseURL+"/logs/cleanup", wrapper.CleanupLogs)
	router.GET(options.BaseURL+"/logs/export", wrapper.ExportLogs)
	router.GET(options.BaseURL+"/logs/stats", wrapper.GetLogsStat)
	router.GET(options.BaseURL+"/logs/stream", wrapper.StreamLogs)
	router.GET(options.BaseURL+"/logs/:id", wrapper.GetLog)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/tenants", wrapper.CreateTenant)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"72rCVbOfvYJT9bKvi9vFvwMAAP//IzfNxMM/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
