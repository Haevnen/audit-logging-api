// Package api_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_service

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate auth token
	// (POST /auth/token)
	GenerateToken(c *gin.Context)
	// Advanced search logs
	// (GET /logs)
	SearchLogs(c *gin.Context, params SearchLogsParams)
	// Create a new log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Create bulk logs
	// (POST /logs/bulk)
	CreateBulkLogs(c *gin.Context)
	// Cleanup log
	// (DELETE /logs/cleanup)
	CleanupLogs(c *gin.Context, params CleanupLogsParams)
	// Export logs
	// (GET /logs/export)
	ExportLogs(c *gin.Context, params ExportLogsParams)
	// Get logs stat
	// (GET /logs/stats)
	GetLogsStat(c *gin.Context, params GetLogsStatParams)
	// Stream logs in real time
	// (GET /logs/stream)
	StreamLogs(c *gin.Context, params StreamLogsParams)
	// Get a log by id
	// (GET /logs/{id})
	GetLog(c *gin.Context, id string)

	// (GET /ping)
	GetPing(c *gin.Context)
	// List all tenants
	// (GET /tenants)
	ListTenants(c *gin.Context)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateToken operation middleware
func (siw *ServerInterfaceWrapper) GenerateToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateToken(c)
}

// SearchLogs operation middleware
func (siw *ServerInterfaceWrapper) SearchLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchLogsParams

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", c.Request.URL.Query(), &params.Resource)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resource: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", c.Request.URL.Query(), &params.Severity)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter severity: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", c.Request.URL.Query(), &params.PageNumber)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageNumber: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchLogs(c, params)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLog(c)
}

// CreateBulkLogs operation middleware
func (siw *ServerInterfaceWrapper) CreateBulkLogs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBulkLogs(c)
}

// CleanupLogs operation middleware
func (siw *ServerInterfaceWrapper) CleanupLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CleanupLogsParams

	// ------------- Required query parameter "before_date" -------------

	if paramValue := c.Query("before_date"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument before_date is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "before_date", c.Request.URL.Query(), &params.BeforeDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter before_date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CleanupLogs(c, params)
}

// ExportLogs operation middleware
func (siw *ServerInterfaceWrapper) ExportLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportLogsParams

	// ------------- Optional query parameter "tenant_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant_id", c.Request.URL.Query(), &params.TenantId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenant_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", c.Request.URL.Query(), &params.Severity)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter severity: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "format" -------------

	if paramValue := c.Query("format"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument format is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "format", c.Request.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter format: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExportLogs(c, params)
}

// GetLogsStat operation middleware
func (siw *ServerInterfaceWrapper) GetLogsStat(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogsStatParams

	// ------------- Required query parameter "start_date" -------------

	if paramValue := c.Query("start_date"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument start_date is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start_date", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_date: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogsStat(c, params)
}

// StreamLogs operation middleware
func (siw *ServerInterfaceWrapper) StreamLogs(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params StreamLogsParams

	// ------------- Optional query parameter "tenant_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant_id", c.Request.URL.Query(), &params.TenantId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenant_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StreamLogs(c, params)
}

// GetLog operation middleware
func (siw *ServerInterfaceWrapper) GetLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLog(c, id)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTenant(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/token", wrapper.GenerateToken)
	router.GET(options.BaseURL+"/logs", wrapper.SearchLogs)
	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)
	router.POST(options.BaseURL+"/logs/bulk", wrapper.CreateBulkLogs)
	router.DELETE(options.BaseURL+"/logs/cleanup", wrapper.CleanupLogs)
	router.GET(options.BaseURL+"/logs/export", wrapper.ExportLogs)
	router.GET(options.BaseURL+"/logs/stats", wrapper.GetLogsStat)
	router.GET(options.BaseURL+"/logs/stream", wrapper.StreamLogs)
	router.GET(options.BaseURL+"/logs/:id", wrapper.GetLog)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/tenants", wrapper.CreateTenant)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
