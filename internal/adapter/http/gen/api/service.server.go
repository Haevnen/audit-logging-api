// Package api_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_service

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate auth token
	// (POST /auth/token)
	GenerateToken(c *gin.Context)
	// Advanced search logs
	// (GET /logs)
	SearchLogs(c *gin.Context, params SearchLogsParams)
	// Create a new log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Create bulk logs
	// (POST /logs/bulk)
	CreateBulkLogs(c *gin.Context)
	// Cleanup logs
	// (DELETE /logs/cleanup)
	CleanupLogs(c *gin.Context, params CleanupLogsParams)
	// Get logs stat
	// (GET /logs/stats)
	GetLogsStat(c *gin.Context, params GetLogsStatParams)
	// Stream logs in real time
	// (GET /logs/stream)
	StreamLogs(c *gin.Context, params StreamLogsParams)
	// Get a log by id
	// (GET /logs/{id})
	GetLog(c *gin.Context, id string)

	// (GET /ping)
	GetPing(c *gin.Context)
	// List all tenants
	// (GET /tenants)
	ListTenants(c *gin.Context)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateToken operation middleware
func (siw *ServerInterfaceWrapper) GenerateToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateToken(c)
}

// SearchLogs operation middleware
func (siw *ServerInterfaceWrapper) SearchLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchLogsParams

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", c.Request.URL.Query(), &params.Resource)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resource: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", c.Request.URL.Query(), &params.Severity)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter severity: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTime", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startTime: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "endTime", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endTime: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", c.Request.URL.Query(), &params.PageNumber)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageNumber: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchLogs(c, params)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLog(c)
}

// CreateBulkLogs operation middleware
func (siw *ServerInterfaceWrapper) CreateBulkLogs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBulkLogs(c)
}

// CleanupLogs operation middleware
func (siw *ServerInterfaceWrapper) CleanupLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CleanupLogsParams

	// ------------- Required query parameter "beforeDate" -------------

	if paramValue := c.Query("beforeDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument beforeDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "beforeDate", c.Request.URL.Query(), &params.BeforeDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beforeDate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CleanupLogs(c, params)
}

// GetLogsStat operation middleware
func (siw *ServerInterfaceWrapper) GetLogsStat(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogsStatParams

	// ------------- Required query parameter "startDate" -------------

	if paramValue := c.Query("startDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument startDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endDate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogsStat(c, params)
}

// StreamLogs operation middleware
func (siw *ServerInterfaceWrapper) StreamLogs(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params StreamLogsParams

	// ------------- Optional query parameter "tenant_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant_id", c.Request.URL.Query(), &params.TenantId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenant_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StreamLogs(c, params)
}

// GetLog operation middleware
func (siw *ServerInterfaceWrapper) GetLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLog(c, id)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTenant(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/token", wrapper.GenerateToken)
	router.GET(options.BaseURL+"/logs", wrapper.SearchLogs)
	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)
	router.POST(options.BaseURL+"/logs/bulk", wrapper.CreateBulkLogs)
	router.DELETE(options.BaseURL+"/logs/cleanup", wrapper.CleanupLogs)
	router.GET(options.BaseURL+"/logs/stats", wrapper.GetLogsStat)
	router.GET(options.BaseURL+"/logs/stream", wrapper.StreamLogs)
	router.GET(options.BaseURL+"/logs/:id", wrapper.GetLog)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/tenants", wrapper.CreateTenant)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rz8rKvu6ul39NwAA///HAeTXKzkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
