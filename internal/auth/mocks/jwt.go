// Code generated by MockGen. DO NOT EDIT.
// Source: jwt.go
//
// Generated by this command:
//
//	mockgen -source=jwt.go -destination=mocks/jwt.go
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"
	time "time"

	auth "github.com/Haevnen/audit-logging-api/internal/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockManagerInterface is a mock of ManagerInterface interface.
type MockManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockManagerInterfaceMockRecorder is the mock recorder for MockManagerInterface.
type MockManagerInterfaceMockRecorder struct {
	mock *MockManagerInterface
}

// NewMockManagerInterface creates a new mock instance.
func NewMockManagerInterface(ctrl *gomock.Controller) *MockManagerInterface {
	mock := &MockManagerInterface{ctrl: ctrl}
	mock.recorder = &MockManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerInterface) EXPECT() *MockManagerInterfaceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockManagerInterface) GenerateToken(userID, tenantID string, role auth.Role, ttl time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userID, tenantID, role, ttl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockManagerInterfaceMockRecorder) GenerateToken(userID, tenantID, role, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockManagerInterface)(nil).GenerateToken), userID, tenantID, role, ttl)
}

// ParseToken mocks base method.
func (m *MockManagerInterface) ParseToken(tokenStr string) (*auth.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", tokenStr)
	ret0, _ := ret[0].(*auth.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockManagerInterfaceMockRecorder) ParseToken(tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockManagerInterface)(nil).ParseToken), tokenStr)
}
