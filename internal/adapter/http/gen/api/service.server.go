// Package api_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_service

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /ping)
	GetPing(c *gin.Context)

	// (GET /tenants)
	ListTenants(c *gin.Context)

	// (POST /tenants)
	CreateTenant(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTenant(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/tenants", wrapper.CreateTenant)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWX2/jRBD/KtbAA0hO7Thpyfmtd3DoUJEqGoREFUUb78TZw97d2z8VofJ3R7N2GjtO",
	"VRDtG2/27sz85s9vZvYRClVrJVE6C/kj2GKHNQufHwwyh0uUTLpf8ItH694rvqcr/JPVukL6lKxGyOHn",
	"fdRKQhODNkqjcQLtUaKn1BOOwe01HVlnhCyhaWIw+MULgxzy+1Z39SSlNp+xCBA/GKMMWR1iFYoHLI62",
	"MEI7oSTk8MFbp+oISScKIiPcGDg6Jqqx8vfhHHmn3r88Y8UJV53xILgb3fm6ZmZ/Vi8ckNqW+cpBDkI6",
	"NJJV64ALMaD0NeXkgVWCMzK83gbPIAaNphbW0hlHKcKZaWu2lsqtt8pLOjsxunop/12yutwcwuu0ztXl",
	"VsnyhCGaDOegVRvpsGDtZZ8cQe4lv4LaOfyOV0MPisBkvmaU1yzNLifpYjJ9t8zSPFvk0+x3ygyHHKbZ",
	"DOeXV99NcPFuM5lmfDZh88uryTy7urq8nM/TNE0hHnM+Bq/5CxCj0PtenfJlKWq0jtWa6v6UmmdcH5GJ",
	"Yjm16L3gUSfSt/kPQx5h/KuuHubnNYM95esxpyENnZ8D/DFtmhgsFt4It7+j+dfW5z0yg+baux39bcLf",
	"R2XqUOKffluGvujH0SpETv2BNBvCKCWYVvXo+845DQ2hCrlVZLybGnDtuXDRjSpLIcvo+vYTxPCAxrb2",
	"pxfpRUrJVBol0wJymF2kFzPqf+Z2wenk0FAlhkwT4cKs+ET8/hHdbUsAg1YradtIszRth6d02DYP07oS",
	"RVBMPltCP6wG+vra4BZy+Co57o6kWxxJGAAhuGFyNLroAEr3TQyJC3SxPXeHOjfCuogVBVorNhVGnXz0",
	"DeO1kJGS1f5biE9iJKVlZ/g/xikc1valgI9rrysvM4btz6XgzodQtr6KnlwmvXk6fbX0t3vxDPivknm3",
	"U0b8hbwFnb096HUIOPqozEZwjnJYuX7fQX4/7Lj7VUONykpLfX0o6IqmqLJnqN1/rRyX3+HB8iphPvcg",
	"aoZTyBmPzRt22IFw/xPsTQjWKhkau0HHmwpyeNwp65qEaZE8TGkqMyPYpmqru+sYeXy80YjPk6RSBavo",
	"Np8t0sW094h7RoDgj16NFmVwstsL3SPk4HgTj6anKoeiN6q00KyavwMAAP//m26dpvQLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
