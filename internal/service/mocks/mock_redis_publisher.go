// Code generated by MockGen. DO NOT EDIT.
// Source: redis_publisher.go
//
// Generated by this command:
//
//	mockgen -source=redis_publisher.go -destination=./mocks/mock_redis_publisher.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	log "github.com/Haevnen/audit-logging-api/internal/entity/log"
	redis "github.com/redis/go-redis/v9"
	gomock "go.uber.org/mock/gomock"
)

// MockPubSub is a mock of PubSub interface.
type MockPubSub struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubMockRecorder
	isgomock struct{}
}

// MockPubSubMockRecorder is the mock recorder for MockPubSub.
type MockPubSubMockRecorder struct {
	mock *MockPubSub
}

// NewMockPubSub creates a new mock instance.
func NewMockPubSub(ctrl *gomock.Controller) *MockPubSub {
	mock := &MockPubSub{ctrl: ctrl}
	mock.recorder = &MockPubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSub) EXPECT() *MockPubSubMockRecorder {
	return m.recorder
}

// BroadcastLog mocks base method.
func (m *MockPubSub) BroadcastLog(ctx context.Context, logRecord log.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastLog", ctx, logRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastLog indicates an expected call of BroadcastLog.
func (mr *MockPubSubMockRecorder) BroadcastLog(ctx, logRecord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastLog", reflect.TypeOf((*MockPubSub)(nil).BroadcastLog), ctx, logRecord)
}

// BroadcastLogs mocks base method.
func (m *MockPubSub) BroadcastLogs(ctx context.Context, logs []log.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastLogs", ctx, logs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastLogs indicates an expected call of BroadcastLogs.
func (mr *MockPubSubMockRecorder) BroadcastLogs(ctx, logs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastLogs", reflect.TypeOf((*MockPubSub)(nil).BroadcastLogs), ctx, logs)
}

// Publish mocks base method.
func (m *MockPubSub) Publish(ctx context.Context, channel, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, channel, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPubSubMockRecorder) Publish(ctx, channel, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSub)(nil).Publish), ctx, channel, message)
}

// Subscribe mocks base method.
func (m *MockPubSub) Subscribe(ctx context.Context, channel string) *redis.PubSub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, channel)
	ret0, _ := ret[0].(*redis.PubSub)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPubSubMockRecorder) Subscribe(ctx, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubSub)(nil).Subscribe), ctx, channel)
}
