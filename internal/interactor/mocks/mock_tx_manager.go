// Code generated by MockGen. DO NOT EDIT.
// Source: tx_manager.go
//
// Generated by this command:
//
//	mockgen -source=tx_manager.go -destination=./mocks/mock_tx_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockTxManager is a mock of TxManager interface.
type MockTxManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerMockRecorder
	isgomock struct{}
}

// MockTxManagerMockRecorder is the mock recorder for MockTxManager.
type MockTxManagerMockRecorder struct {
	mock *MockTxManager
}

// NewMockTxManager creates a new mock instance.
func NewMockTxManager(ctrl *gomock.Controller) *MockTxManager {
	mock := &MockTxManager{ctrl: ctrl}
	mock.recorder = &MockTxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManager) EXPECT() *MockTxManagerMockRecorder {
	return m.recorder
}

// GetTx mocks base method.
func (m *MockTxManager) GetTx(ctx context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetTx indicates an expected call of GetTx.
func (mr *MockTxManagerMockRecorder) GetTx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockTxManager)(nil).GetTx), ctx)
}

// TransactionExec mocks base method.
func (m *MockTxManager) TransactionExec(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionExec", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransactionExec indicates an expected call of TransactionExec.
func (mr *MockTxManagerMockRecorder) TransactionExec(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionExec", reflect.TypeOf((*MockTxManager)(nil).TransactionExec), ctx, fn)
}
