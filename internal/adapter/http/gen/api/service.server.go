// Package api_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_service

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate auth token
	// (POST /auth/token)
	GenerateToken(c *gin.Context)
	// Advanced search logs
	// (GET /logs)
	SearchLogs(c *gin.Context, params SearchLogsParams)
	// Create a new log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Create bulk logs
	// (POST /logs/bulk)
	CreateBulkLogs(c *gin.Context)
	// Cleanup logs
	// (DELETE /logs/cleanup)
	CleanupLogs(c *gin.Context, params CleanupLogsParams)
	// Get logs stat
	// (GET /logs/stats)
	GetLogsStat(c *gin.Context, params GetLogsStatParams)
	// Get a log by id
	// (GET /logs/{id})
	GetLog(c *gin.Context, id string)

	// (GET /ping)
	GetPing(c *gin.Context)
	// List all tenants
	// (GET /tenants)
	ListTenants(c *gin.Context)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateToken operation middleware
func (siw *ServerInterfaceWrapper) GenerateToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateToken(c)
}

// SearchLogs operation middleware
func (siw *ServerInterfaceWrapper) SearchLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchLogsParams

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", c.Request.URL.Query(), &params.Resource)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resource: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", c.Request.URL.Query(), &params.Severity)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter severity: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTime", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startTime: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "endTime", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endTime: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", c.Request.URL.Query(), &params.PageNumber)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageNumber: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchLogs(c, params)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLog(c)
}

// CreateBulkLogs operation middleware
func (siw *ServerInterfaceWrapper) CreateBulkLogs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBulkLogs(c)
}

// CleanupLogs operation middleware
func (siw *ServerInterfaceWrapper) CleanupLogs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CleanupLogsParams

	// ------------- Required query parameter "beforeDate" -------------

	if paramValue := c.Query("beforeDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument beforeDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "beforeDate", c.Request.URL.Query(), &params.BeforeDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beforeDate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CleanupLogs(c, params)
}

// GetLogsStat operation middleware
func (siw *ServerInterfaceWrapper) GetLogsStat(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogsStatParams

	// ------------- Required query parameter "startDate" -------------

	if paramValue := c.Query("startDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument startDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endDate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogsStat(c, params)
}

// GetLog operation middleware
func (siw *ServerInterfaceWrapper) GetLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLog(c, id)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTenant(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/token", wrapper.GenerateToken)
	router.GET(options.BaseURL+"/logs", wrapper.SearchLogs)
	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)
	router.POST(options.BaseURL+"/logs/bulk", wrapper.CreateBulkLogs)
	router.DELETE(options.BaseURL+"/logs/cleanup", wrapper.CleanupLogs)
	router.GET(options.BaseURL+"/logs/stats", wrapper.GetLogsStat)
	router.GET(options.BaseURL+"/logs/:id", wrapper.GetLog)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/tenants", wrapper.CreateTenant)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
