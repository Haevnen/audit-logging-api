// Package api_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api_service

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate auth token
	// (POST /auth/token)
	GenerateToken(c *gin.Context)

	// (GET /ping)
	GetPing(c *gin.Context)
	// List all tenants
	// (GET /tenants)
	ListTenants(c *gin.Context)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateToken operation middleware
func (siw *ServerInterfaceWrapper) GenerateToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateToken(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTenant(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/token", wrapper.GenerateToken)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/tenants", wrapper.CreateTenant)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXW2/bNhT+K8TZHjpAjuRLslRvabduHTIsWDwMWGAYtHRssZVIlqSyeYH++8CLbclS",
	"lgaN97QnW9S5n4/fOXqATFRScORGQ/oAOiuwou7vW4XU4Bw55eZX/FSjNm9EvrWv8C9ayRLtX04rhBR+",
	"3hIvCU0EUgmJyjDUB4mWUks4ArOV9kgbxfgGmiYChZ9qpjCH9M7rLvZSYvUBM+fie6WEsla7vjKRO185",
	"6kwxaZjgkMLbWhtREbQ6xIn0/EaQo6Gs7Ct/584xD+rtlwNWDDPlQAQuXHJbVxVV20E9d2DV1rQuDaTA",
	"uEHFabl0fiEC5HVla3JPS5ZTa3i5dpFBBBJVxbS2Zzly5s6U79mSC7Nci5rbsyOji6fqH4oVarNLL2gN",
	"9eUH5KgsbMRH5I+jRgkHBJpXjMe1RhXTOmfG5WkcNJYshxTGkynOzi++HeHl69VoPMmnIzo7vxjNJhcX",
	"5+ezWZIkCURgLTxDoQdRH04bosOR9bp2CLWt/JlR98zt0/hyY0d9dAl+Rr+0FFzjUbOMfQdp+O0VL7x+",
	"eCIELzYUw43gmyOX0lpIQQpfmK5D/7JdIyf3VA2c2pD/wEXdCDLHfvmS2rs4SSbno+RyNH49nyTp5DId",
	"T/6wt+kZEO3xZAS1zJ9w0Uu9HdUxx8xZhdrQSlqu2JfmkdB72POw61qsa5aTIBK9AL6fNQm69XnJZI85",
	"7lBTV4YQZ8d/HzZNBBqzWjGzvbUz0/fnDVKF6qo2hX1auad3QlWuxT/9Pndc2s7DKxB/OSI/fq0br3qI",
	"vTBGQmO9Mr4W7rb5SQNXlp7ItdhsGN+Qq5v3EME9Ku3tj8+SM0d4QiKnkkEK07PkbGpnBjWFCzqmtSni",
	"/TWWQg8UfEcUxAr7eMkrg9pYr7JWUmj8Bpwf5YbT+7ylNQ/5qe5EyAQ36K8elbJkmdOMP2jBD8uI/fe1",
	"wjWk8FV82FbisKrEj46cpttpo2p0B57kXOqTJDlVHIFKXRDdUt7WWYZar+uS7KtlWzR7wWD8fjTg/A3N",
	"SSiSB3HYSQY7bPFHN9rekl9MgQoWViXeEfAGXZTHLTc3njBOVmk3MAZyK5CWpiBZgdlHog4dOGTxo5MI",
	"afjprVuZdM1dM20Idb1iqxJJkCev3HJABC+3fcRbpXkw/IUlYAYr/VQtDlt3YAqqFN0+D3bj08PuN25R",
	"JRT7G3PvdHp6p1cuYfJOqBXLc0tY7c61KRzSuy553y2aRftyeCyU5Q4ErZux6/bCTutB7vRfUoQSjn8G",
	"A/8Oovan14lY87Gvu/+YNHfw/R+uLwrXAcQNItYbVXZfcDZrVUIKD4XQpompZPH92K4TVDG6Kn33iz3E",
	"d1+qdjdJ47gUGS3t23R6mVyOW1+sjwhY94t9VL0Nz98Tv9CE7XkXeBP1uFpsuqLXYjMk58fYXso/Novm",
	"nwAAAP//oyoHrggRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
