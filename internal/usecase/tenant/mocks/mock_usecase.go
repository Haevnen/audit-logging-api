// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=./mocks/mock_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tenant "github.com/Haevnen/audit-logging-api/internal/entity/tenant"
	gomock "go.uber.org/mock/gomock"
)

// MockCreateTenantUseCaseInterface is a mock of CreateTenantUseCaseInterface interface.
type MockCreateTenantUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTenantUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockCreateTenantUseCaseInterfaceMockRecorder is the mock recorder for MockCreateTenantUseCaseInterface.
type MockCreateTenantUseCaseInterfaceMockRecorder struct {
	mock *MockCreateTenantUseCaseInterface
}

// NewMockCreateTenantUseCaseInterface creates a new mock instance.
func NewMockCreateTenantUseCaseInterface(ctrl *gomock.Controller) *MockCreateTenantUseCaseInterface {
	mock := &MockCreateTenantUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockCreateTenantUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateTenantUseCaseInterface) EXPECT() *MockCreateTenantUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreateTenantUseCaseInterface) Execute(ctx context.Context, name string) (*tenant.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, name)
	ret0, _ := ret[0].(*tenant.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateTenantUseCaseInterfaceMockRecorder) Execute(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateTenantUseCaseInterface)(nil).Execute), ctx, name)
}

// MockListTenantsUseCaseInterface is a mock of ListTenantsUseCaseInterface interface.
type MockListTenantsUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockListTenantsUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockListTenantsUseCaseInterfaceMockRecorder is the mock recorder for MockListTenantsUseCaseInterface.
type MockListTenantsUseCaseInterfaceMockRecorder struct {
	mock *MockListTenantsUseCaseInterface
}

// NewMockListTenantsUseCaseInterface creates a new mock instance.
func NewMockListTenantsUseCaseInterface(ctrl *gomock.Controller) *MockListTenantsUseCaseInterface {
	mock := &MockListTenantsUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockListTenantsUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListTenantsUseCaseInterface) EXPECT() *MockListTenantsUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockListTenantsUseCaseInterface) Execute(ctx context.Context) ([]tenant.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].([]tenant.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockListTenantsUseCaseInterfaceMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockListTenantsUseCaseInterface)(nil).Execute), ctx)
}
