// Code generated by MockGen. DO NOT EDIT.
// Source: s3_publisher.go
//
// Generated by this command:
//
//	mockgen -source=s3_publisher.go -destination=./mocks/mock_s3_publisher.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	log "github.com/Haevnen/audit-logging-api/internal/entity/log"
	gomock "go.uber.org/mock/gomock"
)

// MockS3Publisher is a mock of S3Publisher interface.
type MockS3Publisher struct {
	ctrl     *gomock.Controller
	recorder *MockS3PublisherMockRecorder
	isgomock struct{}
}

// MockS3PublisherMockRecorder is the mock recorder for MockS3Publisher.
type MockS3PublisherMockRecorder struct {
	mock *MockS3Publisher
}

// NewMockS3Publisher creates a new mock instance.
func NewMockS3Publisher(ctrl *gomock.Controller) *MockS3Publisher {
	mock := &MockS3Publisher{ctrl: ctrl}
	mock.recorder = &MockS3PublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Publisher) EXPECT() *MockS3PublisherMockRecorder {
	return m.recorder
}

// UploadLogs mocks base method.
func (m *MockS3Publisher) UploadLogs(ctx context.Context, taskId string, logs []log.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadLogs", ctx, taskId, logs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadLogs indicates an expected call of UploadLogs.
func (mr *MockS3PublisherMockRecorder) UploadLogs(ctx, taskId, logs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadLogs", reflect.TypeOf((*MockS3Publisher)(nil).UploadLogs), ctx, taskId, logs)
}
