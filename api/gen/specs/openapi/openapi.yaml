openapi: 3.0.3
info:
  title: Audit Logging API
  version: 1.0.0
servers:
- url: '{host}/api/v1'
  variables:
    host:
      default: http://localhost:38081
      enum:
      - http://localhost:38081
tags:
- description: Tenant API
  name: Tenants
- description: Log API
  name: Logs
- description: Other
  name: Other
paths:
  /auth/token:
    post:
      description: Generate auth token (testing purpose)
      operationId: GenerateToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateTokenRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTokenResponse'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
      summary: Generate auth token
      tags:
      - Other
  /ping:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
          description: health check response
      tags:
      - Health
  /tenants:
    get:
      description: List accessible tenants (admin only)
      operationId: ListTenants
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tenant'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access Forbidden (admin only)
      security:
      - BearerAuth: []
      summary: List all tenants
      tags:
      - Tenants
    post:
      description: Create a new tenant (admin only)
      operationId: CreateTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access Forbidden (admin only)
      security:
      - BearerAuth: []
      summary: Create a new tenant
      tags:
      - Tenants
  /logs:
    post:
      description: Create a new log
      operationId: CreateLog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLogResponse'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access Forbidden
      security:
      - BearerAuth: []
      summary: Create a new log
      tags:
      - Logs
  /logs/bulk:
    post:
      description: Create bulk logs
      operationId: CreateBulkLogs
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/CreateLogRequestBody'
              type: array
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLogResponse'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access Forbidden
      security:
      - BearerAuth: []
      summary: Create bulk logs
      tags:
      - Logs
  /logs/{id}:
    get:
      description: Get a log by id
      operationId: GetLog
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSingleLogResponse'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - BearerAuth: []
      summary: Get a log by id
      tags:
      - Logs
components:
  schemas:
    Tenant:
      example:
        updated_at: 2025-08-19T20:28:12Z
        name: My Tenant
        created_at: 2025-08-19T20:28:12Z
        id: 123e4567-e89b-12d3-a456-426655440000
      properties:
        id:
          description: uuid string
          example: 123e4567-e89b-12d3-a456-426655440000
          type: string
        name:
          example: My Tenant
          type: string
        created_at:
          description: Timestamp
          example: 2025-08-19T20:28:12Z
          type: string
        updated_at:
          description: Timestamp
          example: 2025-08-19T20:28:12Z
          type: string
      required:
      - created_at
      - id
      - name
      - updated_at
      type: object
    Error:
      properties:
        type:
          default: internal_error
          enum:
          - validation_failed
          - permission_denied
          - request_not_found
          - internal_error
          type: string
        code:
          description: Custom error code
          type: string
        title:
          description: Error Summary
          type: string
        detail:
          description: Detailed error description
          type: string
      required:
      - code
      - detail
      - title
      - type
      type: object
    CreateTenantRequestBody:
      example:
        name: My Tenant
      properties:
        name:
          example: My Tenant
          type: string
      required:
      - name
      type: object
    GenerateTokenResponse:
      example:
        token: token
      properties:
        token:
          type: string
      required:
      - token
      type: object
    Pong:
      example:
        ping: pong
      properties:
        ping:
          example: pong
          type: string
      required:
      - ping
      type: object
    GenerateTokenRequestBody:
      example:
        tenant_id: 123e4567-e89b-12d3-a456-426655440000
        role: admin/user/auditor
        user_id: 123user
      properties:
        tenant_id:
          example: 123e4567-e89b-12d3-a456-426655440000
          type: string
        user_id:
          example: 123user
          type: string
        role:
          example: admin/user/auditor
          type: string
      required:
      - role
      - tenant_id
      - user_id
      type: object
    CreateLogRequestBody:
      example:
        tenant_id: tenant_id
        metadata:
          key: '{}'
        resource: resource
        before:
          key: '{}'
        session_id: session_id
        ip_address: ip_address
        message: message
        event_timestamp: 2000-01-23T04:56:07.000+00:00
        user_id: user_id
        resource_id: resource_id
        after:
          key: '{}'
        user_agent: user_agent
      properties:
        tenant_id:
          type: string
        user_id:
          type: string
        session_id:
          type: string
        action:
          $ref: '#/components/schemas/Action'
        message:
          type: string
        resource:
          type: string
        resource_id:
          type: string
        severity:
          $ref: '#/components/schemas/Severity'
        ip_address:
          format: ipv4
          type: string
        user_agent:
          type: string
        before:
          additionalProperties: true
          type: object
        after:
          additionalProperties: true
          type: object
        metadata:
          additionalProperties: true
          type: object
        event_timestamp:
          format: date-time
          type: string
      required:
      - action
      - event_timestamp
      - severity
      - tenant_id
      - user_id
      type: object
    CreateLogResponse:
      example:
        created_at: created_at
        id: id
      properties:
        id:
          description: UUID
          type: string
        created_at:
          description: Timestamp
          type: string
      required:
      - created_at
      - id
      type: object
    Severity:
      enum:
      - INFO
      - WARNING
      - ERROR
      - CRITICAL
      type: string
    Action:
      enum:
      - CREATE
      - UPDATE
      - DELETE
      - VIEW
      type: string
    GetSingleLogResponse:
      example:
        tenant_id: tenant_id
        metadata:
          key: '{}'
        resource: resource
        before:
          key: '{}'
        session_id: session_id
        created_at: created_at
        ip_address: ip_address
        message: message
        event_timestamp: event_timestamp
        user_id: user_id
        resource_id: resource_id
        id: id
        after:
          key: '{}'
        user_agent: user_agent
      properties:
        id:
          description: UUID
          type: string
        tenant_id:
          type: string
        user_id:
          type: string
        session_id:
          type: string
        action:
          $ref: '#/components/schemas/Action'
        message:
          type: string
        resource:
          type: string
        resource_id:
          type: string
        severity:
          $ref: '#/components/schemas/Severity'
        ip_address:
          format: ipv4
          type: string
        user_agent:
          type: string
        before:
          additionalProperties: true
          type: object
        after:
          additionalProperties: true
          type: object
        metadata:
          additionalProperties: true
          type: object
        event_timestamp:
          description: Timestamp
          type: string
        created_at:
          description: Timestamp
          type: string
      required:
      - action
      - created_at
      - event_timestamp
      - id
      - severity
      - tenant_id
      - user_id
      type: object
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      description: Bearer token
      scheme: bearer
      type: http
